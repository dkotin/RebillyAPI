swagger: '2.0'
info:
  version: '2.1'
  title: Rebilly REST API
  contact:
    name: Rebilly API Support
    url: 'https://www.rebilly.com/contact/'
    email: integrations@rebilly.com
  license:
    name: Rebilly
    url: 'https://www.rebilly.com/api/license/'
  termsOfService: 'https://www.rebilly.com/terms/'
  x-logo:
    url: 'https://rebilly.github.io/RebillyAPI/rb_apiLogo.svg'
    backgroundColor: '#0033A0'
host: api.rebilly.com
basePath: /v2.1
schemes:
  - https
produces:
  - application/json
consumes:
  - application/json
tags:
  - name: Introduction
    description: |
      The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
      resource URLs.  It returns HTTP response codes to indicate errors.  It also
      accepts and returns JSON in the HTTP body.  You can use your favorite
      HTTP/REST library for your programming language to use Rebilly's API, or
      you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
      and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).
  - name: Authentication
    description: |
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Session).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.
  - name: Customers
    description: |
      Customers are your customers, sometimes known as accounts, clients,
      members, patrons, or players in other systems.
  - name: Contacts
    description: |
      Contacts belong to Customers. A Customer can have many contacts.
      Some contacts are associated to Invoices, Payment Cards, Subscriptions
      and Transactions.
  - name: Blacklists
    description: |
      Your blacklists contains values of customerIds, email addresses,
      ipAddresses, bank identification numbers, countries or payment cards that
      you do NOT want to do business with. They are a good tool for managing
      risk. A blacklist entry that expires after a period of time we call a
      greylist.
  - name: Layouts
    description: |
      Layouts are used to hold collections of plans. A layout can be used to
      power a pricing page. You can make multiple layouts, and use rules to
      target them to different audiences.
  - name: Organizations
    description: |
      Organizations include the name and address of the entities related to your
      account. An account may be multi-national, and support multiple
      organizations. Note: Organizations are share between "Live" and "Sandbox"
  - name: Payments
    description: |
      Collect money from your customers with payments.  You can schedule a payment
      to occur in the future.  You can assign a payment to a dunning schedule.

      Some payments may be, what we term, suspended payments.  These types of payments
      require user interaction.  For example, an initial PayPal purchase, a 3D Secure
      purchase, China Union Pay, and more require the customer's interaction to
      complete the payment.  We call these a "suspended" payment flow.
  - name: Products
    description: |
      Proposed:  Your product includes digital goods, services, and physical goods.
  - name: Taxes
    description: |
      Proposed: You can map a product to a tax category.  The tax category is used by
      tax providers to calculate taxes for invoices.
  - name: Websites
    description: |
      A Website represents the website/brand that customers interact with... You
      could think of it like a brand.  For example, Nestle owns Perrier and Purina
      and PowerBar.

      We recognize that some enterprises have more than one website (or brand).  The
      website is related to each invoice and each payment gateway account.  This feature
      would allow you to have gateway accounts that are related to multiple websites, or
      exclusive to particular websites.  And gives you more control over your business.
  - name: Users
    description: |
      A User represents a person who can login to Rebilly, and take actions subject to
      their granted permissions.
  - name: Sessions
    description: |
      A session contains a token, which is a JSON Web Token.  The token is created
      with a user's signin credentials.

      This token can be used to authenticate to the API.  In addition, the session can be set to
      expire at a particular time, and has very granular control over permissions.
      Use the token to then authenticate for further requests to the Rebilly API.

      The token should be kept private, but could be stored on the user's browser
      client to simulate a "session."
  - name: Tracking
    description: |
      Tracking is a layer for accessing all the activity (API requests,
      subscriptions, webhooks, events, etc.), thus providing easier
      debugging and issues auditing.
securityDefinitions:
  ApiKey:
    description: |
      When you sign up for an account, you are given your first API key.
      To do so please follow this link: https://www.rebilly.com/site/signup/
      Also you can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future).
    name: REB-APIKEY
    type: apiKey
    in: header
  JWT:
    description: |
      You can create a JSON Web Token (JWT) via our Sessions resource.
    type: basic
security:
  - ApiKey: []
responses:
  AccessForbidden:
    description: 'Access forbidden, invalid API-KEY was used'
    schema:
      $ref: '#/definitions/Error'
  NotFound:
    description: Resource was not found
    schema:
      $ref: '#/definitions/Error'
  Conflict:
    description: Conflict
    schema:
      $ref: '#/definitions/Error'
  InvalidDataError:
    description: Invalid data was sent
    schema:
      $ref: '#/definitions/InvalidError'
parameters:
  resourceId:
    name: id
    in: path
    description: The resource identifier string
    type: string
    required: true
  collectionLimit:
    name: limit
    in: query
    description: The collection items limit
    type: integer
    minimum: 0
    maximum: 1000
  collectionOffset:
    name: offset
    in: query
    description: The collection items offset
    type: integer
    minimum: 0
  collectionFilter:
    name: filter
    in: query
    type: string
    description: |
      The collection items filter requires a special format.
      Use "," for multiple allowed values.  Use ";" for multiple fields.
      See the filter guide for more options and examples about this format.
  collectionQuery:
    name: q
    in: query
    type: string
    description: The partial search of the text fields.
  collectionSort:
    name: sort
    in: query
    type: string
    description: 'The collection items sort field and order (prefix with "-" for descending sort).'
  collectionFields:
    name: fields
    in: query
    type: string
    description: 'Limit the returned fields to the list specified, separated by comma.  Note that id is always returned.'
  collectionExpand:
    name: expand
    in: query
    type: string
    description: Expand response to get full related object intead of ID.  See the expand guide for more info.
paths:
  /3dsecure:
    post:
      tags:
        - 3D Secure
      summary: Create a ThreeDSecure entry
      description: |
        Create a ThreeDSecure entry
      parameters:
        - name: body
          in: body
          description: ThreeDSecure resource
          required: true
          schema:
            $ref: '#/definitions/ThreeDSecure'
      responses:
        '201':
          description: ThreeDSecure entry was created
          schema:
            $ref: '#/definitions/ThreeDSecure'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          $ref: '#/responses/InvalidDataError'
  '/3dsecure/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - 3D Secure
      summary: Retrieve a ThreeDSecure entry
      description: |
        Retrieve a ThreeDSecure entry with specified identifier string
      responses:
        '200':
          description: ThreeDSecure entry was retrieved successfully
          schema:
            $ref: '#/definitions/ThreeDSecure'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
  /authentication-options:
    get:
      tags:
        - Customer Authentication
      summary: Read current authentication options
      description: |
        Read current authentication options
      responses:
        '200':
          description: Current authentication options was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/AuthenticationOptions'
        '401':
          $ref: '#/responses/AccessForbidden'
    put:
      tags:
        - Customer Authentication
      summary: Change authentication options
      description: |
        Change options
      parameters:
        - name: body
          in: body
          description: Authentication Options resource
          required: true
          schema:
            $ref: '#/definitions/AuthenticationOptions'
      responses:
        '200':
          description: Authentication Options were updated
          schema:
            $ref: '#/definitions/AuthenticationOptions'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  /authentication-tokens:
    get:
      tags:
        - Customer Authentication
      summary: Retrieve a list of auth tokens
      description: |
        Retrieve a list of auth tokens
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of auth tokens was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/AuthenticationToken'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Customer Authentication
      summary: Login
      description: |
        Login a user (customer)
      parameters:
        - name: body
          in: body
          description: AuthenticationToken resource
          required: true
          schema:
            $ref: '#/definitions/AuthenticationToken'
      responses:
        '201':
          description: Login successful
          schema:
            $ref: '#/definitions/AuthenticationToken'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/authentication-tokens/{token}':
    parameters:
      - name: token
        in: path
        description: The token identifier string
        type: string
        required: true
    get:
      tags:
        - Customer Authentication
      summary: Verify
      description: |
        Verify an authentication token
      responses:
        '200':
          description: Authentication Token was verified
          schema:
            $ref: '#/definitions/AuthenticationToken'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    delete:
      tags:
        - Customer Authentication
      summary: Logout a user
      description: |
        Logout a user
      responses:
        '204':
          description: User was logged out
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
  /bank-accounts:
    get:
      tags:
        - Bank Accounts
      summary: Retrieve a list of bank accounts
      description: |
        Retrieve a list of Bank Accounts
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Bank Accounts was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/BankAccount'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Bank Accounts
      summary: Create a Bank Account
      description: |
        Create a Bank Account
      parameters:
        - name: body
          in: body
          description: BankAccount resource
          required: true
          schema:
            $ref: '#/definitions/BankAccount'
      responses:
        '201':
          description: Bank Account was created
          schema:
            $ref: '#/definitions/BankAccount'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/bank-accounts/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Bank Accounts
      summary: Retrieve a Bank Account
      description: |
        Retrieve a Bank Account with specified identifier string
      responses:
        '200':
          description: BankAccount was retrieved successfully
          schema:
            $ref: '#/definitions/BankAccount'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Bank Accounts
      summary: Create a BankAccount with predefined ID
      description: |
        Create or update a BankAccount with predefined identifier string
      parameters:
        - name: body
          in: body
          description: BankAccount resource
          required: true
          schema:
            $ref: '#/definitions/BankAccount'
      responses:
        '200':
          description: BankAccount was updated
          schema:
            $ref: '#/definitions/BankAccount'
        '201':
          description: BankAccount was created
          schema:
            $ref: '#/definitions/BankAccount'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/bank-accounts/{id}/deactivation':
    parameters:
      - $ref: '#/parameters/resourceId'
    post:
      tags:
        - Bank Account
      summary: Deactivate a Bank Account
      description: |
        Deactivate a Bank Account
      responses:
        '201':
          description: Deactivated successful
          schema:
            $ref: '#/definitions/BankAccount'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  /blacklists:
    get:
      tags:
        - Blacklists
      summary: Retrieve a list of blacklists
      description: |
        Retrieve a list of blacklists
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Blacklists was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Blacklist'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Blacklists
      summary: Create a blacklist
      description: |
        Create a blacklist
      parameters:
        - name: body
          in: body
          description: Blacklist resource
          required: true
          schema:
            $ref: '#/definitions/Blacklist'
      responses:
        '201':
          description: Blacklist was created
          schema:
            $ref: '#/definitions/Blacklist'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          $ref: '#/responses/InvalidDataError'
  '/blacklists/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Blacklists
      summary: Retrieve a blacklist
      description: |
        Retrieve a blacklist with specified identifier string
      responses:
        '200':
          description: Blacklist was retrieved successfully
          schema:
            $ref: '#/definitions/Blacklist'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Blacklists
      summary: Create a blacklist with predefined ID
      description: |
        Create a blacklist with predefined identifier string
      parameters:
        - name: body
          in: body
          description: Blacklist resource
          required: true
          schema:
            $ref: '#/definitions/Blacklist'
      responses:
        '201':
          description: Blacklist was created
          schema:
            $ref: '#/definitions/Blacklist'
        '401':
          $ref: '#/responses/AccessForbidden'
        '409':
          description: Blacklist exist and cannot be updated
          schema:
            $ref: '#/definitions/Error'
        '422':
          $ref: '#/responses/InvalidDataError'
    delete:
      tags:
        - Blacklists
      summary: Delete a blacklist
      description: |
        Delete a blacklist with predefined identifier string
      responses:
        '204':
          description: Blacklist was deleted
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
  /contacts:
    get:
      tags:
        - Contacts
      summary: Retrieve a list of contacts
      description: |
        Retrieve a list of contacts
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Contacts was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Contact'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Contacts
      summary: Create a contact
      description: |
        Create a contact
      parameters:
        - name: body
          in: body
          description: Contact resource
          required: true
          schema:
            $ref: '#/definitions/Contact'
      responses:
        '201':
          description: Contact was created
          schema:
            $ref: '#/definitions/Contact'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          $ref: '#/responses/InvalidDataError'
  '/contacts/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Contacts
      summary: Retrieve a contact
      description: |
        Retrieve a contact with specified identifier string
      responses:
        '200':
          description: Contact was retrieved successfully
          schema:
            $ref: '#/definitions/Contact'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Contacts
      summary: Create or update a contact with predefined ID
      description: |
        Create or update a contact with predefined identifier string
      parameters:
        - name: body
          in: body
          description: Contact resource
          required: true
          schema:
            $ref: '#/definitions/Contact'
      responses:
        '201':
          description: Contact was created
          schema:
            $ref: '#/definitions/Contact'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          description: Contact exists and cannot be updated
        '422':
          $ref: '#/responses/InvalidDataError'
  /credentials:
    get:
      tags:
        - Customer Authentication
      summary: Retrieve a list of credentials
      description: |
        Retrieve a list of credentials
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Credentials was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Credential'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Customer Authentication
      summary: Create a credential
      description: |
        Create a credential
      parameters:
        - name: body
          in: body
          description: Credential resource
          required: true
          schema:
            $ref: '#/definitions/Credential'
      responses:
        '201':
          description: Credential was created
          schema:
            $ref: '#/definitions/Credential'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/credentials/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Customer Authentication
      summary: Retrieve a credential
      description: |
        Retrieve a credential with specified identifier string
      responses:
        '200':
          description: Credential was retrieved successfully
          schema:
            $ref: '#/definitions/Credential'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Customer Authentication
      summary: Create or update a credential with predefined ID
      description: |
        Create or update a credential with predefined identifier string
      parameters:
        - name: body
          in: body
          description: Credential resource
          required: true
          schema:
            $ref: '#/definitions/Credential'
      responses:
        '200':
          description: Credential was updated
          schema:
            $ref: '#/definitions/Credential'
        '201':
          description: Credential was created
          schema:
            $ref: '#/definitions/Credential'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
    delete:
      tags:
        - Customer Authentication
      summary: Delete a credential
      description: |
        Delete a credential with predefined identifier string
      responses:
        '204':
          description: Credential was deleted
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
  '/custom-fields/{resource}':
    parameters:
      - name: resource
        in: path
        description: The resource type string
        type: string
        required: true
        enum:
          - customers
          - payment-cards
          - subscriptions
          - payments
          - websites
          - contacts
    get:
      tags:
        - Custom Fields
      summary: Retrieve Custom Fields
      description: |
        Retrieve a schema of Custom Fields for the given resource type
      responses:
        '200':
          description: A schema of Custom Fields was retrieved successfully
          schema:
            description: The list of custom fields
            type: array
            items:
              $ref: '#/definitions/CustomField'
        '401':
          $ref: '#/responses/AccessForbidden'
  '/custom-fields/{resource}/{name}':
    parameters:
      - name: resource
        in: path
        description: The resource type string
        type: string
        required: true
        enum:
          - customers
          - payment-cards
          - subscriptions
          - payments
          - websites
          - contacts
      - name: name
        in: path
        description: "The custom field's identifier string"
        type: string
        required: true
    get:
      tags:
        - Custom Fields
      summary: Retrieve a Custom Field
      description: |
        Retrieve a schema of the given Custom Field for the given resource type
      responses:
        '200':
          description: A schema of the Custom Field was retrieved successfully
          schema:
            $ref: '#/definitions/CustomField'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Custom Fields
      summary: Create or alter a Custom Field
      description: |
        Create or alter a schema of the given Custom Field for the given resource type.
      parameters:
        - name: body
          in: body
          description: Custom Fields schema of the given resource type
          required: true
          schema:
            $ref: '#/definitions/CustomField'
      responses:
        '200':
          description: The Custom Field was updated
          schema:
            $ref: '#/definitions/CustomField'
        '201':
          description: The Custom Fields was created
          schema:
            $ref: '#/definitions/CustomField'
        '401':
          $ref: '#/responses/AccessForbidden'
        '409':
          description: 'The schema is in use: remove all the associated data in order to remove or alter the schema'
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
    delete:
      tags:
        - Custom Fields
      summary: Delete a custom field
      description: |
        Delete a custom field by its name
      responses:
        '204':
          description: Custom field has been deleted
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          description: 'The field is in use: remove all the associated data first'
          schema:
            $ref: '#/definitions/Error'
  /customers:
    get:
      tags:
        - Customers
      summary: Retrieve a list of customers
      description: |
        Retrieve a list of customers
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
        - $ref: '#/parameters/collectionFilter'
        - $ref: '#/parameters/collectionQuery'
        - $ref: '#/parameters/collectionSort'
        - $ref: '#/parameters/collectionFields'
        - $ref: '#/parameters/collectionExpand'
      responses:
        '200':
          description: A list of Customers was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Customer'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Customers
      summary: Create a customer
      description: |
        Create a customer
      parameters:
        - name: body
          in: body
          description: Customer resource
          required: true
          schema:
            $ref: '#/definitions/Customer'
      responses:
        '201':
          description: Customer was created
          schema:
            $ref: '#/definitions/Customer'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          $ref: '#/responses/InvalidDataError'
  '/customers/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Customers
      summary: Retrieve a customer
      description: |
        Retrieve a customer with specified identifier string
      responses:
        '200':
          description: Customer was retrieved successfully
          schema:
            $ref: '#/definitions/Customer'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Customers
      summary: Create a customer with predefined ID
      description: |
        Create a customer with predefined identifier string
      parameters:
        - name: body
          in: body
          description: Customer resource
          required: true
          schema:
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Customer was updated
          schema:
            $ref: '#/definitions/Customer'
        '201':
          description: Customer was created
          schema:
            $ref: '#/definitions/Customer'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          $ref: '#/responses/InvalidDataError'
  /email-credentials:
    get:
      tags:
        - Email Credentials
      summary: Retrieve a list of email credentials
      description: |
        Retrieve a list of email credentials
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of email credentials was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/EmailCredential'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Email Credentials
      summary: Create email credential
      description: Create email credential
      parameters:
        - name: body
          in: body
          description: EmailCredential resource
          required: true
          schema:
            $ref: '#/definitions/EmailCredential'
      responses:
        '201':
          description: Email credential was created
          schema:
            $ref: '#/definitions/EmailCredential'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/email-credentials/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Email Credentials
      summary: Retrieve email credential
      description: |
        Retrieve email credential with specified identifier string
      responses:
        '200':
          description: Email credential was retrieved successfully
          schema:
            $ref: '#/definitions/EmailCredential'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Email Credentials
      summary: Create or update email credential with predefined ID
      description: |
        Create or update email credential with predefined identifier string
      parameters:
        - name: body
          in: body
          description: EmailCredential resource
          required: true
          schema:
            $ref: '#/definitions/EmailCredential'
      responses:
        '200':
          description: Email credential was updated
          schema:
            $ref: '#/definitions/EmailCredential'
        '201':
          description: Email credential was created
          schema:
            $ref: '#/definitions/EmailCredential'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
    delete:
      tags:
        - Email Credentials
      summary: Delete an email credential
      description: |
        Delete an email credential with predefined identifier string
      responses:
        '204':
          description: Email credential was deleted
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
  /forgot-password:
    post:
      tags:
        - Users
      summary: Sends an email with a link containing a token to reset user password
      description: |
        Sends an email with a link containing a token to reset user password
      parameters:
        - name: body
          in: body
          description: Email resource
          required: true
          schema:
            $ref: '#/definitions/Email'
      responses:
        '204':
          description: Email sent successfully
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  /gateway-accounts:
    get:
      tags:
        - Gateway Accounts
      summary: Retrieve a list of gateway accounts
      description: |
        Retrieve a list of gateway accounts
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Gateway Accounts was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/GatewayAccount'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Gateway Accounts
      summary: Create a Gateway Account
      description: |
        Create a Gateway Account
      parameters:
        - name: body
          in: body
          description: Gateway Account resource
          required: true
          schema:
            $ref: '#/definitions/GatewayAccount'
      responses:
        '201':
          description: Gateway Account was created
          schema:
            $ref: '#/definitions/GatewayAccount'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/gateway-accounts/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Gateway Accounts
      summary: Retrieve a Gateway Account
      description: |
        Retrieve a Gateway Account with specified identifier string
      responses:
        '200':
          description: Gateway Account was retrieved successfully
          schema:
            $ref: '#/definitions/GatewayAccount'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Gateway Accounts
      summary: Create or update a Gateway Account with predefined ID
      description: |
        Create or update a GatewayAccount with predefined identifier string
      parameters:
        - name: body
          in: body
          description: Gateway Account resource
          required: true
          schema:
            $ref: '#/definitions/GatewayAccount'
      responses:
        '200':
          description: Gateway Account was updated
          schema:
            $ref: '#/definitions/GatewayAccount'
        '201':
          description: Gateway Account was created
          schema:
            $ref: '#/definitions/GatewayAccount'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
    delete:
      tags:
        - Gateway Accounts
      summary: Delete a Gateway Account
      description: |
        Delete a Gateway Account with predefined identifier string
      responses:
        '204':
          description: Gateway Account was deleted
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
  /invoices:
    get:
      tags:
        - Invoices
      summary: Retrieve a list of invoices
      description: |
        Retrieve a list of invoices
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of invoices was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Invoice'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Invoices
      summary: Create an invoice
      description: |
        Create an invoice
      parameters:
        - name: body
          in: body
          description: Invoice resource
          required: true
          schema:
            $ref: '#/definitions/Invoice'
      responses:
        '201':
          description: Invoice was created
          schema:
            $ref: '#/definitions/Invoice'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/invoices/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Invoices
      summary: Retrieve an invoice
      description: |
        Retrieve an invoice with specified identifier string
      responses:
        '200':
          description: Invoice was retrieved successfully
          schema:
            $ref: '#/definitions/Invoice'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Invoices
      summary: Create or update an invoice with predefined ID
      description: |
        Create or update an invoice with predefined identifier string
      parameters:
        - name: body
          in: body
          description: Invoice resource
          required: true
          schema:
            $ref: '#/definitions/Invoice'
      responses:
        '200':
          description: Invoice was updated
          schema:
            $ref: '#/definitions/Invoice'
        '201':
          description: Invoice was created
          schema:
            $ref: '#/definitions/Invoice'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/invoices/{id}/abandon':
    parameters:
      - $ref: '#/parameters/resourceId'
    post:
      tags:
        - Invoices
      summary: Abandon an invoice
      description: |
        Abandon an invoice with specified identifier string
      responses:
        '201':
          description: Invoice was abandoned successfully
          schema:
            $ref: '#/definitions/Invoice'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
  '/invoices/{id}/issue':
    parameters:
      - $ref: '#/parameters/resourceId'
    post:
      tags:
        - Invoices
      summary: Issue an invoice
      description: |
        Issue an invoice with specified identifier string
      parameters:
        - name: body
          in: body
          description: InvoiceItem resource
          required: true
          schema:
            $ref: '#/definitions/InvoiceIssue'
      responses:
        '201':
          description: Invoice was abandoned successfully
          schema:
            $ref: '#/definitions/Invoice'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
  '/invoices/{id}/items':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Invoices
      summary: Retrieve invoice items
      description: |
        Retrieve an invoice items with specified invoice identifier string
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: Invoice items were retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/InvoiceItem'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    post:
      tags:
        - Invoices
      summary: Create an invoice item
      description: |
        Create an invoice item
      parameters:
        - name: body
          in: body
          description: InvoiceItem resource
          required: true
          schema:
            $ref: '#/definitions/InvoiceItem'
      responses:
        '201':
          description: InvoiceItem was created
          schema:
            $ref: '#/definitions/InvoiceItem'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/invoices/{id}/void':
    parameters:
      - $ref: '#/parameters/resourceId'
    post:
      tags:
        - Invoices
      summary: Void an invoice
      description: |
        Void an invoice with specified identifier string
      responses:
        '201':
          description: Invoice was voided successfully
          schema:
            $ref: '#/definitions/Invoice'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
  /layouts:
    get:
      tags:
        - Layouts
      summary: Retrieve a layout list
      description: |
        Retrieve a layout list
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: Layout list was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Layout'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Layouts
      summary: Create a layout
      description: |
        Create a layout
      parameters:
        - name: body
          in: body
          description: Layout resource
          required: true
          schema:
            $ref: '#/definitions/Layout'
      responses:
        '201':
          description: Layout was created
          schema:
            $ref: '#/definitions/Layout'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          $ref: '#/responses/InvalidDataError'
  '/layouts/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Layouts
      summary: Retrieve a layout
      description: |
        Retrieve a layout with specified identifier string
      responses:
        '200':
          description: Layout was retrieved successfully
          schema:
            $ref: '#/definitions/Layout'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Layouts
      summary: Create or update a layout with predefined ID
      description: |
        Create or update a layout with predefined identifier string
      parameters:
        - name: body
          in: body
          description: Layout resource
          required: true
          schema:
            $ref: '#/definitions/Layout'
      responses:
        '200':
          description: Layout was updated
          schema:
            $ref: '#/definitions/Layout'
        '201':
          description: Layout was created
          schema:
            $ref: '#/definitions/Layout'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          $ref: '#/responses/InvalidDataError'
  /lead-sources:
    get:
      tags:
        - Lead Sources
      summary: Retrieve a list of Lead Sources
      description: |
        Retrieve a list of Lead Sources
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of LeadSources was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/LeadSource'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Lead Sources
      summary: Create a LeadSource
      description: |
        Create a Lead Source
      parameters:
        - name: body
          in: body
          description: Lead Source resource
          required: true
          schema:
            $ref: '#/definitions/LeadSource'
      responses:
        '201':
          description: Lead Source was created
          schema:
            $ref: '#/definitions/LeadSource'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/lead-sources/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Lead Sources
      summary: Retrieve a Lead Source
      description: |
        Retrieve a Lead Source with specified identifier string
      responses:
        '200':
          description: Lead Source was retrieved successfully
          schema:
            $ref: '#/definitions/LeadSource'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Lead Sources
      summary: Create a Lead Source with predefined ID
      description: |
        Create a Lead Source with predefined identifier string
      parameters:
        - name: body
          in: body
          description: Lead Source resource
          required: true
          schema:
            $ref: '#/definitions/LeadSource'
      responses:
        '200':
          description: Lead Source was updated
          schema:
            $ref: '#/definitions/LeadSource'
        '201':
          description: Lead Source was created
          schema:
            $ref: '#/definitions/LeadSource'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  /notes:
    get:
      tags:
        - Notes
      summary: Retrieve a list of notes
      description: |
        Retrieve a list of notes
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Notes was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Note'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Notes
      summary: Create a note
      description: |
        Create a note
      parameters:
        - name: body
          in: body
          description: Note resource
          required: true
          schema:
            $ref: '#/definitions/Note'
      responses:
        '201':
          description: Note was created
          schema:
            $ref: '#/definitions/Note'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/notes/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Notes
      summary: Retrieve a note
      description: |
        Retrieve a note with specified identifier string
      responses:
        '200':
          description: Note was retrieved successfully
          schema:
            $ref: '#/definitions/Note'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Notes
      summary: Create or update a note with predefined ID
      description: |
        Create or update a note with predefined identifier string
      parameters:
        - name: body
          in: body
          description: Note resource
          required: true
          schema:
            $ref: '#/definitions/Note'
      responses:
        '200':
          description: Note was updated
          schema:
            $ref: '#/definitions/Note'
        '201':
          description: Note was created
          schema:
            $ref: '#/definitions/Note'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  /organizations:
    get:
      tags:
        - Organizations
      summary: Retrieve a list of organizations
      description: |
        Retrieve a list of organizations
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of organizations was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Organization'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Organizations
      summary: Create a organization
      description: |
        Create a organization
      parameters:
        - name: body
          in: body
          description: Organization resource
          required: true
          schema:
            $ref: '#/definitions/Organization'
      responses:
        '201':
          description: Organization was created
          schema:
            $ref: '#/definitions/Organization'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          $ref: '#/responses/InvalidDataError'
  '/organizations/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Organizations
      summary: Retrieve a organization
      description: |
        Retrieve a organization with specified identifier string
      responses:
        '200':
          description: Organization was retrieved successfully
          schema:
            $ref: '#/definitions/Organization'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Organizations
      summary: Create or update a organization with predefined ID
      description: |
        Create or update a organization with predefined identifier string
      parameters:
        - name: body
          in: body
          description: Organization resource
          required: true
          schema:
            $ref: '#/definitions/Organization'
      responses:
        '200':
          description: Organization was updated
          schema:
            $ref: '#/definitions/Organization'
        '201':
          description: Organization was created
          schema:
            $ref: '#/definitions/Organization'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          $ref: '#/responses/InvalidDataError'
    delete:
      tags:
        - Organizations
      summary: Delete a organization
      description: |
        Delete a organization with predefined identifier string
      responses:
        '204':
          description: Organization was deleted
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          description: Organization has related resources and cannot be deleted
          schema:
            $ref: '#/definitions/Error'
  /password-tokens:
    get:
      tags:
        - Customer Authentication
      summary: Retrieve a list of tokens
      description: |
        Retrieve a list of tokens
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Reset Password Tokens was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/ResetPasswordToken'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Customer Authentication
      summary: Create a Reset Password Token
      description: |
        Create a Reset Password Token
      parameters:
        - name: body
          in: body
          description: ResetPasswordToken resource
          required: true
          schema:
            $ref: '#/definitions/ResetPasswordToken'
      responses:
        '201':
          description: Reset Password Token was created
          schema:
            $ref: '#/definitions/ResetPasswordToken'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/password-tokens/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Customer Authentication
      summary: Retrieve a Reset Password Token
      description: |
        Retrieve a Reset Password Token with specified identifier string
      responses:
        '200':
          description: ResetPasswordToken was retrieved successfully
          schema:
            $ref: '#/definitions/ResetPasswordToken'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    delete:
      tags:
        - Customer Authentication
      summary: Delete a Reset Password Token
      description: |
        Delete a Reset Password Token with predefined identifier string
      responses:
        '204':
          description: ResetPasswordToken was deleted
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          description: ResetPasswordToken has related resources and cannot be deleted
  /payment-cards:
    get:
      tags:
        - Payment Cards
      summary: Retrieve a list of Payment Cards
      description: |
        Retrieve a list of Payments Cards
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Payment Card was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/PaymentCard'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Payment Cards
      summary: Create a Payment Card
      description: |
        Create a Payment Card
      parameters:
        - name: body
          in: body
          description: PaymentCard resource
          required: true
          schema:
            $ref: '#/definitions/PaymentCard'
      responses:
        '201':
          description: Payment Card was created
          schema:
            $ref: '#/definitions/PaymentCard'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/payment-cards/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Payment Cards
      summary: Retrieve a Payment Card
      description: |
        Retrieve a Payment Card with specified identifier string
      responses:
        '200':
          description: PaymentCard was retrieved successfully
          schema:
            $ref: '#/definitions/PaymentCard'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
  '/payment-cards/{id}/authorization':
    parameters:
      - $ref: '#/parameters/resourceId'
    post:
      tags:
        - Payment Cards
      summary: Authorize a Payment Card
      description: |
        Authorize a Payment Card
      parameters:
        - name: body
          in: body
          description: Payment Card resource
          required: true
          schema:
            type: object
            required:
              - websiteId
              - currency
            properties:
              websiteId:
                description: The Website ID
                type: string
              currency:
                description: Currency (three letter code)
                type: string
              gatewayAccountId:
                description: The Gateway account ID
                type: string
              amount:
                description: Amount
                type: number
                format: double
      responses:
        '201':
          description: Authorization successful
          schema:
            $ref: '#/definitions/PaymentCard'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/payment-cards/{id}/deactivation':
    parameters:
      - $ref: '#/parameters/resourceId'
    post:
      tags:
        - Payment Cards
      summary: Deactivate a Payment Card
      description: |
        Deactivate a Payment Card
      responses:
        '201':
          description: Authorization successful
          schema:
            $ref: '#/definitions/PaymentCard'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  /payments:
    get:
      tags:
        - Payments
      summary: Retrieve a payment list
      description: |
        Retrieve a payment list
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: Payment list was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Payment'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    post:
      tags:
        - Payments
      summary: Create a payment
      description: |
        Create a payment
      parameters:
        - name: body
          in: body
          description: Payment resource
          required: true
          schema:
            $ref: '#/definitions/Payment'
      responses:
        '201':
          description: Payment was processed
          schema:
            type: array
            items:
              $ref: '#/definitions/Payment'
        '202':
          description: Payment was accepted
          schema:
            $ref: '#/definitions/Payment'
        '401':
          $ref: '#/responses/AccessForbidden'
        '409':
          $ref: '#/responses/Conflict'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/payments/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Payments
      summary: Retrieve a payment
      description: |
        Retrieve a payment with specified identifier string
      responses:
        '200':
          description: Payment was retrieved successfully
          schema:
            $ref: '#/definitions/Payment'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Payments
      summary: Create a payment with predefined ID
      description: |
        Make a payment with predefined identifier string
      parameters:
        - name: body
          in: body
          description: Payment resource
          required: true
          schema:
            $ref: '#/definitions/Payment'
      responses:
        '201':
          description: Payment was processed
          schema:
            type: array
            items:
              $ref: '#/definitions/Payment'
        '202':
          description: Payment was accepted
          schema:
            $ref: '#/definitions/Payment'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  /plans:
    get:
      tags:
        - Plans
      summary: Retrieve a list of plans
      description: |
        Retrieve a list of plans
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Plans was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Plan'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Plans
      summary: Create a plan
      description: |
        Create a plan
      parameters:
        - name: body
          in: body
          description: Plan resource
          required: true
          schema:
            $ref: '#/definitions/Plan'
      responses:
        '201':
          description: Plan was created
          schema:
            $ref: '#/definitions/Plan'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/plans/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Plans
      summary: Retrieve a plan
      description: |
        Retrieve a plan with specified identifier string
      responses:
        '200':
          description: Plan was retrieved successfully
          schema:
            $ref: '#/definitions/Plan'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Plans
      summary: Create or update a Plan with predefined ID
      description: |
        Create or update a Plan with predefined identifier string
      parameters:
        - name: body
          in: body
          description: Plan resource
          required: true
          schema:
            $ref: '#/definitions/Plan'
      responses:
        '200':
          description: Plan was updated
          schema:
            $ref: '#/definitions/Plan'
        '201':
          description: Plan was created
          schema:
            $ref: '#/definitions/Plan'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
    delete:
      tags:
        - Plans
      summary: Delete a Plan
      description: |
        Delete a Plan with predefined identifier string
      responses:
        '204':
          description: Plan was deleted
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
  /products:
    get:
      tags:
        - Products
      summary: Retrieve a list of products
      description: |
        Retrieve a list of products
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of products was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Products
      summary: Create a Product
      description: |
        Create a Product
      parameters:
        - name: body
          in: body
          description: Product resource
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        '201':
          description: Product was created
          schema:
            $ref: '#/definitions/Product'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          $ref: '#/responses/InvalidDataError'
  '/products/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Products
      summary: Retrieve a product
      description: |
        Retrieve a product with specified identifier string
      responses:
        '200':
          description: Product was retrieved successfully
          schema:
            $ref: '#/definitions/Product'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Products
      summary: Create a product with predefined ID
      description: |
        Create a product with predefined identifier string
      parameters:
        - name: body
          in: body
          description: Product resource
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Product was updated
          schema:
            $ref: '#/definitions/Product'
        '201':
          description: Product was created
          schema:
            $ref: '#/definitions/Product'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          $ref: '#/responses/InvalidDataError'
  /queue/payments:
    get:
      tags:
        - Payments
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      summary: Retrieve a scheduled payment list
      description: |
        Retrieve a scheduled payment list
      responses:
        '200':
          description: Successful retrieve the payments list that still waiting to be processed
          schema:
            type: array
            items:
              $ref: '#/definitions/Payment'
        '401':
          $ref: '#/responses/AccessForbidden'
  '/queue/payments/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Payments
      summary: Retrieve a scheduled payment
      description: |
        Retrieve a payment with specified identifier string
      responses:
        '200':
          description: Successful retrieve the payment that still waiting to be processed
          schema:
            $ref: '#/definitions/Payment'
        '303':
          description: Payment was successfully processed and moved out from queue
          schema:
            $ref: '#/definitions/Payment'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
  '/queue/payments/{id}/cancel':
    parameters:
      - $ref: '#/parameters/resourceId'
    post:
      tags:
        - Payments
      summary: Cancel a scheduled payment
      description: |
        Cancel a scheduled payment with specified identifier string
      responses:
        '201':
          description: Successful cancel the payment
          schema:
            $ref: '#/definitions/Payment'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
  /sessions:
    get:
      tags:
        - Sessions
      summary: Retrieve a list of sessions
      description: |
        Retrieve a list of sessions
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Sessions was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Session'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Sessions
      summary: Create a session
      description: |
        Create a session
      parameters:
        - name: body
          in: body
          description: Sessions resource
          required: true
          schema:
            $ref: '#/definitions/Session'
      responses:
        '201':
          description: Session was created
          schema:
            $ref: '#/definitions/Session'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/sessions/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Sessions
      summary: Retrieve a Session
      description: |
        Retrieve a Session with specified identifier string
      responses:
        '200':
          description: Session was retrieved successfully
          schema:
            $ref: '#/definitions/Session'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Sessions
      summary: Create or update a Session with predefined ID
      description: |
        Create or update a Session with predefined identifier string
      parameters:
        - name: body
          in: body
          description: Session resource
          required: true
          schema:
            $ref: '#/definitions/Session'
      responses:
        '200':
          description: Session was updated
          schema:
            $ref: '#/definitions/Session'
        '201':
          description: Session was created
          schema:
            $ref: '#/definitions/Session'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
    delete:
      tags:
        - Sessions
      summary: Delete a Session
      description: |
        Delete a Session with predefined identifier string
      responses:
        '204':
          description: Session was deleted
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          description: Session has related resources and cannot be deleted
  /signin:
    post:
      tags:
        - Users
        - Sessions
      summary: Create a session with email and password
      description: |
        Create a session with email and password
      parameters:
        - name: body
          in: body
          description: Signin resource
          required: true
          schema:
            $ref: '#/definitions/Signin'
      responses:
        '201':
          description: Session was created
          schema:
            $ref: '#/definitions/Session'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  /signup:
    post:
      tags:
        - Users
      summary: Creates a new user and sends an email confirmation
      description: |
        Creates a new user and sends an email confirmation
      parameters:
        - name: body
          in: body
          description: Signup resource
          required: true
          schema:
            $ref: '#/definitions/Signup'
      responses:
        '201':
          description: User was created
          schema:
            $ref: '#/definitions/User'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  /status:
    get:
      tags:
        - Status
      summary: Retrieve API current status
      description: |
        Retrieve API current status
      responses:
        '200':
          description: Status was received
          schema:
            $ref: '#/definitions/Status'
  /subscriptions:
    get:
      tags:
        - Subscriptions
      summary: Retrieve a list of subscriptions
      description: |
        Retrieve a list of subscriptions
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of subscriptions was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Subscription'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Subscriptions
      summary: Create a subscription
      description: |
        Create a subscription
      parameters:
        - name: body
          in: body
          description: Subscription resource
          required: true
          schema:
            $ref: '#/definitions/Subscription'
      responses:
        '201':
          description: Subscription was created
          schema:
            $ref: '#/definitions/Subscription'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/subscriptions/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Subscriptions
      summary: Retrieve a subscription
      description: |
        Retrieve a subscription with specified identifier string
      responses:
        '200':
          description: Subscription was retrieved successfully
          schema:
            $ref: '#/definitions/Subscription'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Subscriptions
      summary: Create or update a subscription with predefined ID
      description: |
        Create or update a subscription with predefined identifier string
      parameters:
        - name: body
          in: body
          description: Subscription resource
          required: true
          schema:
            $ref: '#/definitions/Subscription'
      responses:
        '200':
          description: Subscription was updated
          schema:
            $ref: '#/definitions/Subscription'
        '201':
          description: Subscription was created
          schema:
            $ref: '#/definitions/Subscription'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/subscriptions/{id}/cancel':
    parameters:
      - $ref: '#/parameters/resourceId'
    post:
      tags:
        - Subscriptions
      summary: Cancel a subscription
      description: |
        Cancel a subscription
      parameters:
        - name: body
          in: body
          description: Only policy
          required: true
          schema:
            $ref: '#/definitions/SubscriptionCancel'
      responses:
        '201':
          description: Subscription was switched
          schema:
            $ref: '#/definitions/Subscription'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/subscriptions/{id}/switch':
    parameters:
      - $ref: '#/parameters/resourceId'
    post:
      tags:
        - Subscriptions
      summary: Switch a subscription
      description: |
        Switch a subscription
      parameters:
        - name: body
          in: body
          description: SubscriptionSwitch resource
          required: true
          schema:
            $ref: '#/definitions/SubscriptionSwitch'
      responses:
        '201':
          description: Subscription was switched
          schema:
            $ref: '#/definitions/Subscription'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  /tax-categories:
    get:
      tags:
        - Taxes
      summary: Retrieve a list of tax categories
      description: |
        Retrieve a list of tax categories
      responses:
        '200':
          description: A list of tax categories was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/TaxCategory'
        '401':
          $ref: '#/responses/AccessForbidden'
  /tokens:
    get:
      tags:
        - Payment Tokens
      summary: Retrieve a list of tokens
      description: |
        Retrieve a list of tokens
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of tokens was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/PaymentToken'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Payment Tokens
      summary: Create a payment token
      description: |
        Create a token
      parameters:
        - name: body
          in: body
          description: PaymentToken resource
          required: true
          schema:
            $ref: '#/definitions/PaymentToken'
      responses:
        '201':
          description: Token was created
          schema:
            $ref: '#/definitions/PaymentToken'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/tokens/{token}':
    parameters:
      - name: token
        in: path
        description: The token identifier string
        type: string
        required: true
    get:
      tags:
        - Payment Tokens
      summary: Retrieve a token
      description: |
        Retrieve a token with specified identifier string
      responses:
        '200':
          description: Token was retrieved successfully
          schema:
            $ref: '#/definitions/PaymentToken'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
  '/tokens/{token}/expiration':
    parameters:
      - name: token
        in: path
        description: The token identifier string
        type: string
        required: true
    post:
      tags:
        - Payment Tokens
      summary: Expire a token
      description: |
        Expire a token
      parameters:
        - name: body
          in: body
          description: PaymentToken resource
          required: true
          schema:
            $ref: '#/definitions/PaymentToken'
      responses:
        '201':
          description: Token expiration successful
          schema:
            $ref: '#/definitions/PaymentToken'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  /tracking/api:
    get:
      tags:
        - Tracking
      summary: Retrieve a list of tracking API logs
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: Tracking API logs was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/ApiLog'
        '401':
          $ref: '#/responses/AccessForbidden'
  '/tracking/api/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Tracking
      summary: Retrieve a tracking API log with specified identifier string
      responses:
        '200':
          description: Tracking API log was retrieved successfully
          schema:
            $ref: '#/definitions/ApiLog'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
  /transactions:
    get:
      tags:
        - Transactions
      summary: Retrieve a list of transactions
      description: |
        Retrieve a list of transactions
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of transactions was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Transaction'
        '401':
          $ref: '#/responses/AccessForbidden'
  '/transactions/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Transactions
      summary: Retrieve a Transaction
      description: |
        Retrieve a Transaction with specified identifier string
      responses:
        '200':
          description: Transaction was retrieved successfully
          schema:
            $ref: '#/definitions/Transaction'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
  '/transactions/{id}/refund':
    parameters:
      - $ref: '#/parameters/resourceId'
    post:
      tags:
        - Transactions
      summary: Refund a Transaction
      description: |
        Refund a Transaction with specified identifier string.
        Note that the refund will be in the same currency as the original transaction.
      parameters:
        - name: body
          in: body
          description: Transaction resource
          required: true
          schema:
            $ref: '#/definitions/TransactionRefund'
      responses:
        '201':
          description: Transaction was refunded successfully
          schema:
            $ref: '#/definitions/Transaction'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
  /users:
    get:
      tags:
        - Users
      summary: Retrieve a list of users
      description: |
        Retrieve a list of users
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of users was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Users
      summary: Create an user
      description: |
        Create an user
      parameters:
        - name: body
          in: body
          description: User resource
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: User was created
          schema:
            $ref: '#/definitions/User'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/users/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Users
      summary: Retrieve user
      description: |
        Retrieve user with specified identifier string
      responses:
        '200':
          description: User was retrieved successfully
          schema:
            $ref: '#/definitions/User'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Users
      summary: Create or update user with predefined ID
      description: |
        Create or update user with predefined identifier string
      parameters:
        - name: body
          in: body
          description: User resource
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: User was updated
          schema:
            $ref: '#/definitions/User'
        '201':
          description: User was created
          schema:
            $ref: '#/definitions/User'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Invalid data was sent
          $ref: '#/responses/InvalidDataError'
    delete:
      tags:
        - Users
      summary: Delete user
      description: |
        Delete user with predefined identifier string
      responses:
        '204':
          description: User was deleted
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          description: User has related resources and cannot be deleted
          $ref: '#/responses/Conflict'
  '/users/{id}/password':
    parameters:
      - $ref: '#/parameters/resourceId'
    post:
      tags:
        - Users
      summary: "Updates user's password with the specified newPassword"
      description: |
        Updates user's password with the specified newPassword. And checks if currentPassword matches the actual one.
      parameters:
        - name: body
          in: body
          description: currentPassword and newPassword
          required: true
          schema:
            $ref: '#/definitions/UpdatePassword'
      responses:
        '201':
          description: Password updated successfully
          schema:
            $ref: '#/definitions/User'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Invalid data was sent
          $ref: '#/responses/InvalidDataError'
  '/users/{id}/reset-password/{token}':
    parameters:
      - $ref: '#/parameters/resourceId'
      - name: token
        in: path
        description: The token string
        type: string
        required: true
    post:
      tags:
        - Users
      summary: Reset user password
      description: |
        Reset user password
      parameters:
        - name: body
          in: body
          description: ResetPassword resource
          required: true
          schema:
            $ref: '#/definitions/ResetPassword'
      responses:
        '201':
          description: Password was reseted successfully
          schema:
            $ref: '#/definitions/User'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  /websites:
    get:
      tags:
        - Websites
      summary: Retrieve a list of websites
      description: |
        Retrieve a list of websites
      parameters:
        - $ref: '#/parameters/collectionLimit'
        - $ref: '#/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Websites was retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Website'
        '401':
          $ref: '#/responses/AccessForbidden'
    post:
      tags:
        - Websites
      summary: Create a website
      description: |
        Create a website
      parameters:
        - name: body
          in: body
          description: Website resource
          required: true
          schema:
            $ref: '#/definitions/Website'
      responses:
        '201':
          description: Website was created
          schema:
            $ref: '#/definitions/Website'
        '401':
          $ref: '#/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
  '/websites/{id}':
    parameters:
      - $ref: '#/parameters/resourceId'
    get:
      tags:
        - Websites
      summary: Retrieve a website
      description: |
        Retrieve a website with specified identifier string
      responses:
        '200':
          description: Website was retrieved successfully
          schema:
            $ref: '#/definitions/Website'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Websites
      summary: Create or update a website with predefined ID
      description: |
        Create or update a website with predefined identifier string
      parameters:
        - name: body
          in: body
          description: Website resource
          required: true
          schema:
            $ref: '#/definitions/Website'
      responses:
        '200':
          description: Website was updated
          schema:
            $ref: '#/definitions/Website'
        '201':
          description: Website was created
          schema:
            $ref: '#/definitions/Website'
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '422':
          description: Invalid data was sent
          schema:
            $ref: '#/definitions/InvalidError'
    delete:
      tags:
        - Websites
      summary: Delete a website
      description: |
        Delete a website with predefined identifier string
      responses:
        '204':
          description: Website was deleted
        '401':
          $ref: '#/responses/AccessForbidden'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          description: Website has related resources and cannot be deleted
definitions:
  ach:
    description: An Payment using ACH
    allOf:
      - $ref: '#/definitions/Payment'
      - type: object
        properties:
          paymentInstrument:
            $ref: '#/definitions/PaymentInstrumentAch'
        required:
          - paymentInstrument
  ApiLog:
    type: object
    description: Tracking API Requests.
    properties:
      id:
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      status:
        description: HTTP response code
        type: integer
        readOnly: true
      url:
        description: API request address
        type: string
        readOnly: true
      method:
        description: HTTP method
        type: string
        enum:
          - HEAD
          - GET
          - POST
          - PUT
          - DELETE
        readOnly: true
      ipAddress:
        description: Client IP address
        type: string
        format: ipv4
        readOnly: true
      request:
        description: Request JSON-string
        type: string
        readOnly: true
      response:
        description: Response JSON-string
        type: string
        readOnly: true
      duration:
        description: Request duration in milliseconds
        type: integer
        readOnly: true
      createdTime:
        description: The log created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      _links:
        $ref: '#/definitions/Links'
  AuthenticationOptions:
    type: object
    properties:
      passwordPattern:
        description: Allowed password pattern
        type: string
      credentialTtl:
        description: The default lifetime of the credential in seconds
        type: integer
      authTokenTtl:
        description: The default lifetime of the auth-token in seconds
        type: integer
      resetTokenTtl:
        description: The default lifetime of the reset-token in seconds
        type: integer
  AuthenticationToken:
    type: object
    required:
      - username
      - password
    properties:
      token:
        description: The token identifier string
        type: string
        readOnly: true
      username:
        description: "The token's username"
        type: string
      password:
        description: "The token's password (write-only)"
        type: string
        format: password
      credentialId:
        description: "The credential's ID"
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      customerId:
        description: "The token's customer ID"
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      expiredTime:
        description: "Token's expired time"
        type: string
        format: date-time
      _links:
        $ref: '#/definitions/Links'
  BankAccount:
    type: object
    properties:
      id:
        description: The bank account identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      customerId:
        description: "The Customer's ID."
        allOf:
          - $ref: '#/definitions/ResourceId'
      bankName:
        description: "Bank's name."
        type: string
      routingNumber:
        description: "Bank's Routing Number. Required if bank account is not created from Token"
        type: string
      accountNumber:
        description: "Bank's Account Number. Required if bank account is not created from Token"
        type: string
      accountType:
        description: "Banks's Account type. Required if bank account is not created from Token"
        type: string
      token:
        description: Bank Account Token. Use without any other fields
        type: string
      contactId:
        description: The Contact ID. Required if bank account is not created from Token
        allOf:
          - $ref: '#/definitions/ResourceId'
      status:
        description: Bank Account status
        type: string
        enum:
          - active
          - deactivated
      createdTime:
        description: Bank Account created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: Bank Account updated time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      customFields:
        $ref: '#/definitions/ResourceCustomFields'
      _links:
        $ref: '#/definitions/Links'
  Blacklist:
    type: object
    required:
      - type
      - value
    properties:
      id:
        description: The blacklist identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      type:
        description: The blacklist type
        type: string
        enum:
          - paymentCardId
          - customerId
          - email
          - ipAddress
          - country
      value:
        description: The blacklist value
        type: string
      ttl:
        description: The blacklist time to live
        type: integer
        minimum: 30
      expireTime:
        description: The blacklist expire time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      createdTime:
        description: The blacklist created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: The blacklist updated time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      _links:
        $ref: '#/definitions/Links'
  Contact:
    type: object
    properties:
      id:
        description: The contact identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      customerId:
        description: The contact customer ID
        allOf:
          - $ref: '#/definitions/ResourceId'
      firstName:
        description: The contact first name
        type: string
      lastName:
        description: The contact last name
        type: string
      organization:
        description: The contact organization
        type: string
      address:
        description: The contact street address
        type: string
        maxLength: 60
      address2:
        description: The contact street address (second line)
        type: string
        maxLength: 60
      city:
        description: The contact city
        type: string
        maxLength: 45
      region:
        description: The contact region (state)
        type: string
        maxLength: 45
      country:
        description: The contact country ISO Alpha-2 code
        type: string
        pattern: '^[A-Z]{2}$'
      postalCode:
        description: The contact postal code
        type: string
        maxLength: 10
      phoneNumber:
        description: The contact phone number
        type: string
      createdTime:
        description: The contact created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: The contact updated time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      customFields:
        $ref: '#/definitions/ResourceCustomFields'
      _links:
        $ref: '#/definitions/Links'
  Credential:
    type: object
    required:
      - username
      - password
      - customerId
    properties:
      id:
        description: The credential identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      username:
        description: "Credential's username"
        type: string
      password:
        description: "The credential's password"
        type: string
        format: password
      customerId:
        description: "The credential's customer ID"
        type: string
      expiredTime:
        description: "The credential's expired time"
        type: string
        format: date-time
      _links:
        $ref: '#/definitions/Links'
  Customer:
    type: object
    properties:
      id:
        description: The customer identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      email:
        description: The customer email
        type: string
        format: email
        maxLength: 100
      firstName:
        description: The customer first name
        type: string
      lastName:
        description: The customer last name
        type: string
      ipAddress:
        description: The customer IP
        type: string
        format: ipv4
      defaultCardId:
        description: The customer default card ID
        allOf:
          - $ref: '#/definitions/ResourceId'
      createdTime:
        description: The customer created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: The customer updated time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      customFields:
        $ref: '#/definitions/ResourceCustomFields'
      _links:
        $ref: '#/definitions/Links'
  CustomField:
    description: A separate Custom Field schema
    type: object
    required:
      - name
      - type
    properties:
      name:
        description: The name of the custom field
        type: string
      type:
        description: |
          Type value    | Description
          ------------- | -------------
          array         | An array of strings up to 255 characters, maximum size is 1000 elements
          boolean       | true or false
          date          | String of format "full-date" (YYYY-MM-DD) from RFC-3339 (full-date)
          datetime      | String of format "date-time" (YYYY-MM-DDTHH:MM:SSZ) from RFC-3339 (date-time)
          integer       | Cardinal value of -2^31..2^31-1
          number        | Float value. It can take cardinal values also which are interpreted as float
          string        | Regular string up to 255 characters
          monetary      | A map of 3-letters currency code and amount, e.g. {"currency": "EUR", "amount": 25.30}
        type: string
        enum:
          - array
          - boolean
          - datetime
          - integer
          - number
          - string
          - monetary
      description:
        description: The custom field description
        type: string
      additionalSchema:
        description: |
          Additional parameters which can be added according to type:
          Parameter Name | Types         | Description
          -------------- | ------------- | -------------
          allowedValues  | string, array | List of allowed values
  DeclineInstructions:
    type: object
    description: Dunning instructions object for payment declines
    properties:
      dunningId:
        description: The dunning identifier string
        allOf:
          - $ref: '#/definitions/ResourceId'
      dunningIndex:
        readOnly: true
        description: The position in the sequence of dunning
        type: integer
  Email:
    type: object
    required:
      - email
    properties:
      email:
        description: Email
        type: string
        format: email
  EmailCredential:
    type: object
    required:
      - senderName
      - senderEmail
      - host
      - port
      - username
      - password
    properties:
      id:
        description: "Credential's identifier string"
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      senderName:
        description: "Credential's sender name"
        type: string
      senderEmail:
        description: "Credential's sender email address"
        type: string
        format: email
      host:
        description: "Credential's host"
        type: string
      port:
        description: "Credential's port"
        type: integer
        minimum: 0
        maximum: 65535
      username:
        description: "Credential's username"
        type: string
      password:
        description: "Credential's password"
        type: string
        format: password
      authenticationMethod:
        description: "Credential's authentication method"
        type: string
        enum:
          - none
          - plain
          - login
          - cram-md5
      encryprionMethod:
        description: "Credential's encryption method"
        type: string
        enum:
          - none
          - tls
          - ssl
      createdTime:
        description: "Credential's created time"
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: "Credential's updated time"
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      _links:
        $ref: '#/definitions/Links'
  Error:
    type: object
    properties:
      status:
        type: integer
        minimum: 100
        maximum: 600
      error:
        type: string
  GatewayAccount:
    type: object
    required:
      - gatewayName
      - merchantCategoryCode
      - websites
      - acquirerName
      - acceptedCurrencies
      - organizationId
    properties:
      id:
        description: The gateway identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      gatewayName:
        description: The gateway name
        type: string
      gatewayConfig:
        type: object
        description: Gateway config. Fields depends on gatewayName
      merchantCategoryCode:
        description: "The gateway's merchant category code"
        type: integer
        minimum: 742
        maximum: 9950
      dccMarkup:
        description: Dynamic currency conversion markup in basis points
        type: integer
        minimum: 1
        maximum: 10000
      descriptor:
        description: "The gateway's desciptor"
        type: string
      city:
        description: "The gateway's city field"
        type: string
      organizationId:
        description: Organization ID
        allOf:
          - $ref: '#/definitions/ResourceId'
      websites:
        description: Websites IDs
        type: array
        items:
          description: Website ID
          allOf:
            - $ref: '#/definitions/ResourceId'
      acquirerName:
        description: Acquirer name
        type: string
      monthlyLimit:
        description: Monthly Limit
        type: integer
        format: double
        minimum: 0
      threeDSecure:
        description: 'True, if Gateway Account allows 3DSecure'
        type: boolean
      threeDSecureType:
        description: Type of 3DSecure
        type: string
        enum:
          - integrated
          - external
      dynamicDescriptor:
        description: 'True, if Gateway Account allows dynamic descriptor'
        type: boolean
      acceptedCurrencies:
        description: Accepted currencies (array of the currency three letter code)
        type: array
        items:
          type: string
      method:
        description: Payment Method
        $ref: '#/definitions/Method'
      paymentCardSchemes:
        description: Accepted payment card brands
        type: array
        items:
          type: string
          enum:
            - Visa
            - MasterCard
            - American Express
            - Discover
            - Maestro
            - Solo
            - Electron
            - JCB
            - Voyager
            - Diners Club
            - Switch
            - Laser
      downtimeStart:
        description: Gateway downtime start
        type: string
        format: date-time
      downtimeEnd:
        description: Gateway downtime end
        type: string
        format: date-time
      createdTime:
        description: Gateway Account created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: Gateway Account updated time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      _links:
        $ref: '#/definitions/Links'
  InvalidError:
    allOf:
      - $ref: '#/definitions/Error'
      - type: object
        properties:
          details:
            type: array
            items:
              type: string
  Invoice:
    type: object
    required:
      - customerId
      - websiteId
      - currency
    properties:
      id:
        description: The invoice identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      customerId:
        description: "The customer's ID"
        allOf:
          - $ref: '#/definitions/ResourceId'
      websiteId:
        description: "The website's ID"
        allOf:
          - $ref: '#/definitions/ResourceId'
      currency:
        description: The currency three letter code
        type: string
      billingContactId:
        description: "Invoice's billing contact ID"
        allOf:
          - $ref: '#/definitions/ResourceId'
      deliveryContactId:
        description: "Invoice's delivery contact ID"
        allOf:
          - $ref: '#/definitions/ResourceId'
      items:
        type: array
        description: Invoice items array
        readOnly: true
        items:
          type: string
      abandonedTime:
        description: Invoice abandoned time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      voidedTime:
        description: Invoice voided time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      closedTime:
        description: Invoice closed time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      dueTime:
        description: Invoice due time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      issuedTime:
        description: Invoice issued time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      createdTime:
        description: Invoice created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      _links:
        $ref: '#/definitions/Links'
  InvoiceIssue:
    type: object
    properties:
      issueTime:
        type: string
        format: date-time
  InvoiceItem:
    type: object
    required:
      - type
      - unitPrice
    properties:
      id:
        description: The website identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      type:
        description: "Invoice item's type"
        type: string
        enum:
          - debit
          - credit
      unitPrice:
        description: "Invoice item's price"
        type: number
        format: double
      quantity:
        description: "Invoice item's quantity"
        type: integer
      description:
        description: "Invoice item's description"
        type: string
      periodStartTime:
        description: Start time
        type: string
        format: date-time
      periodEndTime:
        description: End time
        type: string
        format: date-time
      _links:
        $ref: '#/definitions/Links'
  Layout:
    type: object
    required:
      - name
    properties:
      id:
        description: The layout identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      name:
        description: The name of the layout string
        type: string
      items:
        description: The array of layout items (planId and starred)
        type: array
        items:
          $ref: '#/definitions/LayoutItem'
      createdBy:
        description: The process that created this layout
        type: string
        readOnly: true
      updatedBy:
        description: The process that updated this layout
        type: string
        readOnly: true
      createdTime:
        description: Layout created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: Layout updated time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      customFields:
        $ref: '#/definitions/ResourceCustomFields'
      _links:
        $ref: '#/definitions/Links'
  LayoutItem:
    type: object
    properties:
      planId:
        description: The plan identifier string
        allOf:
          - $ref: '#/definitions/ResourceId'
      starred:
        description: Boolean if the plan should be starred (special callout presentation)
        type: boolean
      order:
        description: "Item's order in Layout"
        type: integer
        readOnly: true
  LeadSource:
    type: object
    required:
      - customerId
    properties:
      id:
        description: The lead source identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      customerId:
        description: Customer ID
        allOf:
          - $ref: '#/definitions/ResourceId'
      medium:
        description: "Lead Source's medium (eg search, display)"
        type: string
      source:
        description: "Lead Source's source (eg google, yahoo)"
        type: string
      campaign:
        description: "Lead Source's campaign (eg go-big-123)"
        type: string
      term:
        description: "Lead Source's term (eg salt shakers)"
        type: string
      content:
        description: "Lead Source's content (eg smiley faces)"
        type: string
      affiliate:
        description: "Lead Source's affiliate (eg 123, Bob Smith)"
        type: string
      subAffiliate:
        description: "Lead Source's sub-affiliate also called a sub-id or click id in some circles (eg 123456)"
        type: string
      salesAgent:
        description: "Lead Source's sales agent (eg James Bond)"
        type: string
      clickId:
        description: "Lead Source's click id (may come from an ad server)"
        type: string
      path:
        description: "Lead Source's path uri (eg www.example.com/some/landing/path)"
        type: string
      ipAddress:
        description: "Customer's IP Address"
        type: string
      currency:
        description: 'Currency (three letter ISO 4217 alpha code) (eg USD, EUR)'
        type: string
      amount:
        description: The amount that the lead cost
        type: number
        format: double
      createdTime:
        description: LeadSource created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: LeadSource updated time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      _links:
        $ref: '#/definitions/Links'
  Link:
    type: object
    properties:
      rel:
        description: The link type
        type: string
        enum:
          - self
      href:
        description: The link URL
        type: string
    required:
      - rel
      - href
  Links:
    type: array
    description: The links related to resource
    readOnly: true
    items:
      $ref: '#/definitions/Link'
  Method:
    type: string
    description: The payment method
    enum:
      - payment_card
      - paypal
      - ach
      - cash
  Note:
    type: object
    required:
      - content
      - relatedType
      - relatedId
    properties:
      id:
        description: The note identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      createdBy:
        description: "The note's creator"
        type: string
        readOnly: true
      content:
        description: "The note's name"
        type: string
      archived:
        description: Is the note archived (excluded from List method)
        type: boolean
      relatedType:
        description: "The note's related resource type"
        type: string
        enum:
          - customer
          - paymentCard
          - paymentGateway
          - subscription
          - transaction
      relatedId:
        description: "The note's related resource ID"
        allOf:
          - $ref: '#/definitions/ResourceId'
      createdTime:
        description: Note created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: Note updated time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      archivedTime:
        description: Note archived time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      _links:
        $ref: '#/definitions/Links'
  Organization:
    type: object
    required:
      - name
    properties:
      id:
        description: The organization identifier string
        $ref: '#/definitions/ResourceId'
        readOnly: true
      createdTime:
        description: The organization created time
        $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: The organization updated time
        $ref: '#/definitions/ServerTimestamp'
      name:
        description: The organization name
        type: string
        maxLength: 60
      address:
        description: The organization street address
        type: string
        maxLength: 60
      address2:
        description: The organization street address
        type: string
        maxLength: 60
      city:
        description: The organization city
        type: string
        maxLength: 45
      region:
        description: The organization region (state)
        type: string
        maxLength: 45
      country:
        description: The organization country ISO Alpha-2 code
        type: string
        pattern: '^[A-Z]{2}$'
      postalCode:
        description: The organization postal code
        type: string
        maxLength: 10
      _links:
        description: The links related to organization
        $ref: '#/definitions/Links'
  payment_card:
    description: A Payment using a Payment Card
    allOf:
      - $ref: '#/definitions/Payment'
      - type: object
        properties:
          paymentInstrument:
            $ref: '#/definitions/PaymentInstrument'
        required:
          - paymentInstrument
  Payment:
    type: object
    required:
      - websiteId
      - customerId
      - currency
      - amount
      - method
    discriminator: method
    properties:
      id:
        description: The payment identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      websiteId:
        description: The website identifier string
        allOf:
          - $ref: '#/definitions/ResourceId'
      customerId:
        description: The customer identifier string
        allOf:
          - $ref: '#/definitions/ResourceId'
      currency:
        description: The payment currency ISO Alpha code
        type: string
      amount:
        description: The payment amount
        type: integer
        format: double
      scheduledTime:
        description: The time the payment is scheduled for collection
        type: string
        format: date-time
      invoiceIds:
        description: The array of invoice identifiers
        type: array
        items:
          $ref: '#/definitions/ResourceId'
      method:
        description: Payment Method
        $ref: '#/definitions/Method'
      description:
        description: The payment description
        type: string
        maxLength: 255
      customFields:
        $ref: '#/definitions/ResourceCustomFields'
      declineInstructions:
        $ref: '#/definitions/DeclineInstructions'
      createdBy:
        description: The process that created this payment
        type: string
      updatedBy:
        description: The process that updated this payment
        type: string
      state:
        description: Payment state
        type: string
      createdTime:
        description: Payment created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: Payment updated time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      _links:
        $ref: '#/definitions/Links'
  PaymentCard:
    type: object
    properties:
      id:
        description: The card identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      customerId:
        description: "The Customer's ID. Required if card is creating not from Token"
        allOf:
          - $ref: '#/definitions/ResourceId'
      pan:
        description: The card PAN (Primary Account Number). Required if card is creating not from Token
        type: string
      expYear:
        description: "Card's expiry year. Required if card is creating not from Token"
        type: integer
      expMonth:
        description: "Card's expiry month. Required if card is creating not from Token"
        type: integer
      cvv:
        description: "Card's cvv (card verification value). Required if card is creating not from Token"
        type: string
      billingContactId:
        description: The Billing Contact ID. Required if card is creating not from Token
        allOf:
          - $ref: '#/definitions/ResourceId'
      token:
        description: PaymentCardToken. Use without any other fields
        type: string
      status:
        description: Payment Card status
        type: string
        readOnly: true
        enum:
          - active
          - expired
          - inactive
          - deactivated
          - pending
      createdTime:
        description: Card created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: Card updated time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      customFields:
        $ref: '#/definitions/ResourceCustomFields'
      _links:
        $ref: '#/definitions/Links'
  PaymentInstrument:
    type: object
    description: Payment instrument object
    properties:
      paymentCardId:
        description: 'The payment card identifier string, required when paying by payment card'
        allOf:
          - $ref: '#/definitions/ResourceId'
      gatewayAccountId:
        description: The payment gateway identifier string
        allOf:
          - $ref: '#/definitions/ResourceId'
  PaymentInstrumentAch:
    type: object
    description: Payment instrument object
    properties:
      bankAccountId:
        description: 'The bank account identifier string, required when paying by ach'
        $ref: '#/definitions/ResourceId'
      gatewayAccountId:
        description: The payment gateway identifier string
        $ref: '#/definitions/ResourceId'
  PaymentToken:
    type: object
    required:
      - method
      - paymentInstrument
      - firstName
      - lastName
    properties:
      id:
        description: The token identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      method:
        description: Payment Method
        $ref: '#/definitions/Method'
      paymentInstrument:
        $ref: '#/definitions/PaymentTokenInstrument'
      firstName:
        description: First name on payment card
        type: string
      lastName:
        description: Last name on payment card
        type: string
      address:
        description: "Customer's billing address 1"
        type: string
      address2:
        description: "Customer's billing address 2"
        type: string
      city:
        description: Billing address city
        type: string
      region:
        description: Billing region
        type: string
      country:
        description: Billing country - Two letter code
        type: string
      phoneNumber:
        description: Phone number
        type: string
      postalCode:
        description: Billing postal code
        type: string
      fingerprint:
        description: Device fingerprint hash
        type: string
      _links:
        $ref: '#/definitions/Links'
  PaymentTokenInstrument:
    type: object
    description: Payment Token instrument object
    properties:
      pan:
        description: The card PAN (Primary Account Number)
        type: string
      expMonth:
        description: "Card's expiry month"
        type: integer
      expYear:
        description: "Card's expiry year"
        type: integer
      cvv:
        description: The CVV/CVC of the payment card
        type: string
      routingNumber:
        description: Routing Number
        type: integer
      accountNumber:
        description: AccountNumber
        type: integer
      accountType:
        description: Account Type
        type: string
      bankName:
        description: Bank name
        type: string
  Plan:
    type: object
    required:
      - name
      - currency
    properties:
      id:
        description: The website identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      name:
        description: The plan name
        type: string
      currency:
        description: Currency (three letter ISO 4217 code)
        type: string
      currencySign:
        description: Currency sign
        type: string
      isActive:
        description: 'If the plan is not active, customers cannot subscribe to the plan (default to true)'
        type: boolean
      description:
        description: The plan description
        type: string
      richDescription:
        description: The plan rich description - supports HTML
        type: string
      recurringAmount:
        description: The amount that recurs according to the schedule
        type: number
        format: double
      recurringPeriodUnit:
        description: The unit of time
        type: string
        enum:
          - day
          - week
          - month
          - year
      recurringPeriodLength:
        description: The length of time (used with the recurringPeriodUnit)
        type: integer
      trialAmount:
        description: The amount of a trial - 0 is a valid value (for free)
        type: number
        format: double
      trialPeriodUnit:
        description: The unit of time
        type: string
        enum:
          - day
          - week
          - month
          - year
      trialPeriodLength:
        description: The length of time (used with the trialPeriodUnit)
        type: integer
      setupAmount:
        description: The amount of a trial - 0 is a valid value (for free)
        type: number
        format: double
      expireTime:
        description: Time when the plan is not longer valid
        type: string
        format: date-time
      contractTermUnit:
        description: The unit of time
        type: string
        enum:
          - day
          - week
          - month
          - year
      contractTermLength:
        description: The length that corresponds with the contractTermUnit
        type: integer
      recurringPeriodLimit:
        description: The number of times a subscription will rebill until the contract is over
        type: integer
      minQuantity:
        description: 'Minimum quantity per order, defaults to 1'
        type: integer
      maxQuantity:
        description: Maximum quantity per order (NULL if no maximum)
        type: integer
      createdTime:
        description: Plan created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: Plan updated time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      _links:
        $ref: '#/definitions/Links'
  Product:
    type: object
    description: |
      Your product includes digital goods, services, and physical goods.
      Products appear on invoice line items.  If you set a tax category identifier,
      taxes will be calculated upon invoice generation.
    example: |
      {
        "id": "stringid",
        "name": "Widget",
        "description": "Fantastic widget",
        "taxCategoryId": null,
        "customFields": [],
        "createdTime": "2015-08-27 13:45:12",
        "updatedTime": "2015-08-27 13:45:12",
        "_links": [
            {
              "rel": "self",
              "href": "https://api.rebilly.com/v2.1/products/stringid"
            }
        ]
      }
    properties:
      id:
        description: The product identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      name:
        description: The product name
        type: string
        maxLength: 255
      description:
        description: The product description
        type: string
        maxLength: 512
      taxCategoryId:
        description: "The product's tax category identifier string"
        type: string
        enum:
          - 99999
          - 20010
          - 40030
          - 51020
          - 51010
          - 31000
          - 30070
      customFields:
        description: Any custom object that may be stored with product (see custom fields)
        type: string
      createdTime:
        description: The product created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: The product updated time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      _links:
        $ref: '#/definitions/Links'
  ResetPassword:
    type: object
    required:
      - newPassword
    properties:
      newPassword:
        description: New password
        type: string
        format: password
  ResetPasswordToken:
    type: object
    required:
      - username
      - password
    properties:
      token:
        description: "The token's identifier string"
        type: string
        readOnly: true
      username:
        description: "The token's username"
        type: string
      password:
        description: "Token's password (only for POST)"
        type: string
        format: password
      credential:
        description: "Token's credential ID"
        type: string
      expiredTime:
        description: Password expired time
        type: string
        format: date-time
      _links:
        $ref: '#/definitions/Links'
  ResourceCustomFields:
    description: |
      "Custom Fields list as a map `{"custom field name": "custom field value", ...}"`.
      The format must follow the saved format (see Custom Fields section for the formats).
    type: object
  ResourceId:
    type: string
    description: The resource ID. Defaults to UUID v4
    maxLength: 50
    example: 4f6cf35x-2c4y-483z-a0a9-158621f77a21
  ServerTimestamp:
    type: string
    description: 'Read-only timestamp, automatically assigned on back-end.'
    format: date-time
    readOnly: true
  Session:
    type: object
    required:
      - permissions
    properties:
      id:
        description: The session identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      token:
        description: "The session's token used for authentication"
        type: string
      permissions:
        description: "The session's permissions. See the format in example"
        allOf:
          - $ref: '#/definitions/UserPermissions'
      createdTime:
        description: Session created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: Session updated time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      expiredTime:
        description: Session expired time. Defaults to one hour
        type: string
        format: date-time
      _links:
        $ref: '#/definitions/Links'
  Signin:
    type: object
    required:
      - email
      - password
    properties:
      email:
        description: Email
        type: string
      password:
        description: Password
        type: string
        format: password
      expiredTime:
        description: Session expired time. Defaults to one hour
        type: string
        format: date-time
  Signup:
    type: object
    required:
      - email
      - company
      - firstName
      - lastName
      - businessPhone
      - password
    properties:
      email:
        description: The user email
        type: string
        format: email
        maxLength: 100
      company:
        description: "The user's company name"
        type: string
      firstName:
        description: The user first name
        type: string
      lastName:
        description: The user last name
        type: string
      businessPhone:
        description: The user business phone number
        type: string
      password:
        description: The user password
        type: string
        format: password
  Status:
    type: object
    properties:
      status:
        description: "The API status. If everything is ok - value is 'ok'"
        type: string
        readOnly: true
        enum:
          - ok
      time:
        description: Current time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
  Subscription:
    type: object
    required:
      - customerId
      - planId
      - websiteId
    properties:
      id:
        description: The Subscription identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      customerId:
        description: Unique id for each customer
        allOf:
          - $ref: '#/definitions/ResourceId'
      planId:
        description: Unique id for each plan
        allOf:
          - $ref: '#/definitions/ResourceId'
      websiteId:
        description: Unique id for each website
        allOf:
          - $ref: '#/definitions/ResourceId'
      initialInvoiceId:
        description: Unique id for the initial invoice
        allOf:
          - $ref: '#/definitions/ResourceId'
      deliveryContactId:
        description: Unique id for each delivery contact
        allOf:
          - $ref: '#/definitions/ResourceId'
      billingContactId:
        description: Unique id for each billing contact
        allOf:
          - $ref: '#/definitions/ResourceId'
      status:
        description: Subscription status
        type: string
        readOnly: true
      quantity:
        description: Quantity for each subscription. Default value to 1
        type: integer
      autopay:
        description: Autopay determines if a payment attempt will be automatic
        type: boolean
        default: true
      startTime:
        description: Subscription start time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      activationTime:
        description: Subscription activation time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      endTime:
        description: Subscription end time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      renewalTime:
        description: Subscription renewal time
        type: string
        format: date-time
      cancelledTime:
        description: Subscription cancelled time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      createdTime:
        description: Subscription created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: Subscription updated time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      customFields:
        $ref: '#/definitions/ResourceCustomFields'
      _links:
        $ref: '#/definitions/Links'
  SubscriptionCancel:
    type: object
    required:
      - policy
    properties:
      policy:
        description: Cancel policy
        type: string
        enum:
          - AT_NEXT_RENEWAL
          - NOW_WITH_PRORATA_REFUND
          - NOW_WITH_PRORATA_CREDIT
          - NOW_WITHOUT_REFUND
          - NOW_WITH_FULL_REFUND
  SubscriptionSwitch:
    type: object
    required:
      - planId
      - policy
    properties:
      planId:
        description: The plan identifier string
        allOf:
          - $ref: '#/definitions/ResourceId'
      policy:
        description: Switch policy
        type: string
        enum:
          - AT_NEXT_RENEWAL
          - NOW_WITH_PRORATA_REFUND
          - NOW_WITH_PRORATA_CREDIT
          - NOW_WITHOUT_REFUND
      websiteId:
        description: "The website's ID"
        allOf:
          - $ref: '#/definitions/ResourceId'
      quantity:
        description: Quantity for each subscription. Default value to 1
        type: integer
  TaxCategory:
    type: object
    properties:
      id:
        description: The tax category identifier string
        type: string
        readOnly: true
        maxLength: 50
        enum:
          - 99999
          - 20010
          - 40030
          - 51020
          - 51010
          - 31000
          - 30070
      description:
        description: The tax category description
        type: string
        maxLength: 512
      taxProvider:
        description: The tax category maps to a provider
        type: string
        enum:
          - TaxJar
      _links:
        $ref: '#/definitions/Links'
  ThreeDSecure:
    type: object
    required:
      - enrolled
      - enrollmentEci
      - customerId
      - gatewayAccountId
      - paymentCardId
      - websiteId
      - currency
      - amount
    properties:
      id:
        description: The ThreeDSecure entry identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      customerId:
        description: Related customer ID
        allOf:
          - $ref: '#/definitions/ResourceId'
      gatewayAccountId:
        description: Related gateway account ID
        allOf:
          - $ref: '#/definitions/ResourceId'
      paymentCardId:
        description: Related payment card ID
        allOf:
          - $ref: '#/definitions/ResourceId'
      websiteId:
        description: Related Website ID
        allOf:
          - $ref: '#/definitions/ResourceId'
      enrolled:
        description: Is the cardholder enrolled in 3DSecure
        type: string
        enum:
          - 'Y'
          - 'N'
          - U
      enrollmentEci:
        description: The ThreeDSecure entry enrollment eci
        type: string
      eci:
        description: The ThreeDSecure entry electronic commerce indicator
        type: integer
      cavv:
        description: The ThreeDSecure entry cardholder authentication verification value
        type: string
      xid:
        description: The ThreeDSecure entry transaction Id
        type: string
      payerAuthResponseStatus:
        description: The ThreeDSecure entry Auth Response Status
        type: string
        enum:
          - 'Y'
          - 'N'
          - U
          - A
      signatureVerification:
        description: If signature was verified
        type: string
        enum:
          - 'Y'
          - 'N'
      amount:
        description: Transaction amount
        type: number
        format: double
      currency:
        description: The currency three letter code
        type: string
      createdTime:
        description: The ThreeDSecure entry created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      _links:
        $ref: '#/definitions/Links'
  Transaction:
    type: object
    properties:
      id:
        description: The transaction identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      type:
        description: Transaction type
        type: string
        readOnly: true
        enum:
          - authorize
          - capture
          - credit
          - refund
          - sale
          - void
      result:
        description: Transaction result
        type: string
        readOnly: true
        enum:
          - approved
          - conn_error
          - declined
          - never_sent
          - pending
          - pending_processor
          - timeout
          - unknown
      amount:
        description: "The transactions's amount"
        type: number
        format: double
        readOnly: true
      currency:
        description: "The transactions's currency"
        type: string
        readOnly: true
      parentTransactionId:
        description: "The transactions's parent ID"
        allOf:
          - $ref: '#/definitions/ResourceId'
        readOnly: true
      rebillNumber:
        description: "The transactions's rebill number"
        type: integer
        readOnly: true
      gatewayAccountId:
        description: "The transactions's Gateway Account ID"
        allOf:
          - $ref: '#/definitions/ResourceId'
        readOnly: true
      gatewayResponse:
        description: "The transactions's processor response"
        type: string
        readOnly: true
      websiteId:
        description: "Website's ID"
        allOf:
          - $ref: '#/definitions/ResourceId'
        readOnly: true
      customerId:
        description: "Customer's ID"
        allOf:
          - $ref: '#/definitions/ResourceId'
        readOnly: true
      paymentCardId:
        description: "Payment Card's ID"
        allOf:
          - $ref: '#/definitions/ResourceId'
        readOnly: true
      method:
        description: Payment Method
        $ref: '#/definitions/Method'
      createdTime:
        description: Transaction created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: Transaction updated time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      _links:
        $ref: '#/definitions/Links'
  TransactionRefund:
    type: object
    required:
      - amount
    properties:
      amount:
        description: Refund amount
        type: number
        format: double
  UpdatePassword:
    type: object
    properties:
      currentPassword:
        description: "Current user's password - used when requesting password change"
        type: string
        format: password
      newPassword:
        description: "New user's password - used when requesting password change"
        type: string
        format: password
  User:
    type: object
    required:
      - email
      - firstName
      - lastName
    properties:
      id:
        description: The user identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      email:
        description: The user email
        type: string
        format: email
        maxLength: 100
      firstName:
        description: "User's first name"
        type: string
      lastName:
        description: "User's last name"
        type: string
      businessPhone:
        description: The user business phone number
        type: string
      mobilePhone:
        description: The user mobile phone number
        type: string
      password:
        description: "User's password. If not provided, password reset email will be sent"
        type: string
        format: password
      permissions:
        description: "The user's permissions. See the format in example"
        allOf:
          - $ref: '#/definitions/UserPermissions'
      createdTime:
        description: The user created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: The user updated time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      loginTime:
        description: The user last login time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      reportingCurrency:
        description: "The user's ISO Alpha-3 code used for reports"
        type: string
      totpRequired:
        description: The user setting of two-factor authentification
        type: boolean
      totpSecret:
        description: The user TOTP key for authentification app (if TOTP enabled)
        type: string
      totpUrl:
        description: The user link to QR-code for TOTP authentification app (if TOTP enabled)
        type: string
        format: url
      status:
        description: The user status
        type: string
        enum:
          - active
          - inactive
          - pendingConfirmation
        readOnly: true
      country:
        description: The user country setting - two letter code
        type: string
      _links:
        $ref: '#/definitions/Links'
  UserPermissions:
    type: array
    minItems: 1
    items:
      type: object
      properties:
        resourceName:
          type: string
          enum:
            - authentication-options
            - authentication-tokens
            - bank-accounts
            - blacklists
            - contacts
            - credentials
            - customers
            - custom-fields
            - disputes
            - gateway-accounts
            - invoices
            - lead-sources
            - layouts
            - organizations
            - payment-cards
            - payments
            - password-tokens
            - plans
            - queue
            - subscriptions
            - transactions
            - tokens
            - websites
        methods:
          type: array
          minItems: 1
          items:
            type: string
            enum:
              - HEAD
              - GET
              - POST
              - PUT
              - DELETE
        resourceIds:
          type: array
          items:
            $ref: '#/definitions/ResourceId'
    example:
      - resourceName: plans
        methods:
          - GET
          - POST
          - PUT
          - HEAD
          - DELETE
      - resourceName: invoices
        methods:
          - GET
          - HEAD
        resourceIds:
          - 4f6cf35x-2c4y-483z-a0a9-158621f77a21
          - 1586f35x-4f6c-483z-a0a9-2c4y21f77a21
      - resourceName: null
        methods: null
        resourceIds: null
  Website:
    type: object
    required:
      - name
      - url
      - servicePhone
      - serviceEmail
    properties:
      id:
        description: The website identifier string
        readOnly: true
        allOf:
          - $ref: '#/definitions/ResourceId'
      name:
        description: "The website's name"
        type: string
      url:
        description: "The website's domain address"
        type: string
      servicePhone:
        description: "The website's customer service phone number"
        type: string
      serviceEmail:
        description: "The website's customer service email address"
        type: string
        format: email
      checkoutPageUri:
        description: Your own custom URI for this Checkout Page
        type: string
      webHookUrl:
        description: Webhook Url (only for POST/PUT)
        type: string
      webHookUsername:
        description: Webhook HTTP Authentication Username (only for POST/PUT)
        type: string
      webHookPassword:
        description: Webhook HTTP Authentication Password (only for POST/PUT)
        type: string
      createdTime:
        description: Website created time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      updatedTime:
        description: Website updated time
        allOf:
          - $ref: '#/definitions/ServerTimestamp'
      customFields:
        $ref: '#/definitions/ResourceCustomFields'
      _links:
        $ref: '#/definitions/Links'
